#!/bin/bash
this_script_path="$(realpath ${0})"
this_script_name="${this_script_path##*/}"

show_usage() {
  cat <<EOF

  Script to remove all resources from Azure Subscription

    Options:

      -h, --help           Show this help
      -t, --tenant         Tenant ID
      -s, --subscription   Subscription ID

    Examples:

      1. Delete ALL Resources from All Subscriptions

        ${this_script_name?} \\
          --tenant a267367d-d04d-4a6b-84ef-0cc227ed6e9f

      2. Delete ALL Resources from ONE Subscription

        ${this_script_name?} \\
          --tenant       a267367d-d04d-4a6b-84ef-0cc227ed6e9f \\
          --subscription 636a465c-d6b1-4533-b071-64cea37a2bf6     

EOF
}

while [[ "${1}" =~ ^- && ! "${1}" == "--" ]]; do
  case ${1} in
    -h, --help )
      show_usage
      exit 1
      ;;

    -t, --tenant )
      shift
      tenant_id="${1}"
      ;;

    -s, --subscription )
      shift
      subscription_id="${1}"
      ;;

  esac
  shift
done

if [[ "$1" == '--' ]]; then shift; fi

clear

if [ -z "${tenant_id}" ]; then
  tenant_id=$(az account show --query tenantId --output tsv)
fi

azure_tenant_id_nuke="${tenant_id}"
azure_subscription_id="${subscription_id-*}"

jq_expression='.[] | select(.tentantId | contains("%s"))'

jq_expression="$(printf "${jq_expression}" "${azure_tenant_id_nuke}")"

select_subscriptions() {
  az account list \
    --output tsv \
    --query '[].{tenantId:tenantId,id:id,name:name}' \
  | grep "^${azure_tenant_id_nuke}" \
  | grep --extended-regexp "${azure_subscription_id}"
}

subscriptions_selected=$(select_subscriptions | wc --lines)

if [[ "${subscriptions_selected}" == "" || "${subscriptions_selected}" == "0" ]]; then
  echo "There's no subscription selected. Please review the parameters values."
  exit 1
fi

cat <<EOF

WARNING!!! WARNING!!! WARNING!!! WARNING!!!

THIS IS A VERY DANGEROUS ACTION!!!

ALL OF RESOURCE GROUPS UNDER WILL BE COMPLETELY AND UNRECOVER DELETED.

  tentant_id......: ${azure_tenant_id_nuke}
  subscription_id.: ${azure_subscription_id}

DO IT FOR YOUR OWN RISK!!!

EOF

subscription_list="$(select_subscriptions)"

echo "${subscription_list}"

echo ""

read -r -p "Press any key to resume ..."

echo ""
echo ""

log_directory="$(mktemp --directory)"

mkdir --parents "${log_directory?}"

file_log_info="${log_directory?}/aznuke-info.log"
file_log_error="${log_directory?}/aznuke-error.log"

while read -r line; do
  nuke_tenant_id="$(awk '{ print $1 }' <<< "${line}")"
  nuke_subscription_id="$(awk '{ print $2 }' <<< "${line}")"
  nuke_subscription_name="$(awk '{ print $3 }' <<< "${line}")"

  echo "nuke_subscription_name.: ${nuke_subscription_name}"
  echo "nuke_subscription_id...: ${nuke_subscription_id}"
  echo "nuke_tenant_id.........: ${nuke_tenant_id}"

  while read -r resource_group_name; do
    if [ -n "${resource_group_name}" ]; then
      echo "resource_group_name....: ${resource_group_name}"
  
      az group delete \
        --resource-group "${resource_group_name}" \
        --subscription "${nuke_subscription_id}" \
        --no-wait \
        --yes 1> >(tee -a "${file_log_info}") 2> >(tee -a "${file_log_error}" >&2)
    fi
  done <<< "$(az group list \
    --subscription "${nuke_subscription_id}" \
    --output tsv \
    --query '[].name' | grep -v iac)"

  echo ""
done <<< "${subscription_list}"

list_groups() {
  while read -r line; do
    nuke_tenant_id="$(awk '{ print $1 }' <<< "${line}")"
    nuke_subscription_id="$(awk '{ print $2 }' <<< "${line}")"
    nuke_subscription_name="$(awk '{ print $3 }' <<< "${line}")"
     
    echo "${nuke_subscription_name} [${nuke_subscription_id}]"
    echo ""

    az group list \
      --subscription "${nuke_subscription_id}" \
      --output table

    echo ""
  done <<< "${subscription_list}"
}

while true; do
  list_groups
  sleep 5

  clear
done
