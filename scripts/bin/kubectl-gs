#!/bin/bash
show_usage() {
  echo "Kubectl Wait Deployments to become with all Replicas Ready"
  echo ""
  echo "Available Optional Parameters:"
  echo ""
  echo "  -n | --namespace   If this is not informed, the default namespace from current context you be used, if it's empty, then default namespace will be used."
  echo ""
  echo "USAGES:"
  echo "  kubectl gs \\"
  echo "    --namespace argocd"
  echo ""
  echo "  kubectl gs \\"
  echo "    --namespace argocd \\"
  echo "    argocd-secret"
  echo ""
  echo "  kubectl gs \\"
  echo "    --namespace argocd \\"
  echo "    argocd-secret server.secretkey"
  echo ""
}

NAMESPACE="default"
SECRET_NAME=""

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
case $1 in
  -h | --help )
    show_usage
    exit
    ;;
  -n | --namespace )
    shift; NAMESPACE=$1
    ;;
esac; shift; done

if [[ "$1" == '--' ]]; then shift; fi

export NAMESPACE
export SECRET_NAME=$1
export SECRET_KEY_NAME=$2

if [ -n "${SECRET_KEY_NAME}" ]; then
  if grep --silent '.' <<< "${SECRET_KEY_NAME}"; then
    JQ_EXPRESSION=$(printf ".\"%s\"" "${SECRET_KEY_NAME}")
  else
    JQ_EXPRESSION=$(printf ".%s" "${SECRET_KEY_NAME}")
  fi

  SECRET_VALUE=$(kubectl -n ${NAMESPACE} get secret ${SECRET_NAME} -o jsonpath='{.data}' | jq -r "${JQ_EXPRESSION}" | base64 -d)

  echo ${SECRET_VALUE}
else
  if [ -n "${SECRET_NAME}" ]; then
    kubectl -n ${NAMESPACE} get secret ${SECRET_NAME} -o jsonpath='{.data}' | jq .
  else
    kubectl -n ${NAMESPACE} get secret
  fi
fi
