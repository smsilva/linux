#!/bin/bash
show_usage() {
  echo "Kubectl Get Secrets and Decode Secrets Values"
  echo ""
  echo "Available Optional Parameters:"
  echo ""
  echo "  -n | --namespace   If this is not informed, the default namespace from current context you be used, if it's empty, then default namespace will be used."
  echo ""
  echo "USAGES:"
  echo "  kubectl gs \\"
  echo "    --namespace argocd"
  echo ""
  echo "  kubectl gs \\"
  echo "    --namespace argocd \\"
  echo "    argocd-secret"
  echo ""
  echo "  kubectl gs \\"
  echo "    --namespace argocd \\"
  echo "    argocd-secret server.secretkey"
  echo ""
}

namespace=""
secret_name=""

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case $1 in
    -h | --help )
      show_usage
      exit
      ;;

    -n | --namespace )
      shift
      namespace="${1}"
      ;;

  esac
  shift
done

if [[ "$1" == '--' ]]; then shift; fi

if [ -z "${namespace}" ]; then
  kubeconfig_current_context=$(kubectl config view --output jsonpath='{.current-context}')

  namespace=$(kubectl config view \
    --output jsonpath="{.contexts[?(@.context.cluster == \"${kubeconfig_current_context}\")].context.namespace}")  
fi

if [ -z "${namespace}" ]; then
  namespace="default"
fi

secret_name=$1
secret_key_name=$2

if [ -n "${secret_key_name}" ]; then
  if grep --silent '.' <<< "${secret_key_name}"; then
    jq_expression=$(printf ".\"%s\"" "${secret_key_name}")
  else
    jq_expression=$(printf ".%s" "${secret_key_name}")
  fi

  kubectl -n ${namespace} get secret ${secret_name} -o jsonpath='{.data}' | jq -r "${jq_expression}" | base64 -d
else
  if [ -n "${secret_name}" ]; then
    kubectl -n ${namespace} get secret ${secret_name} -o jsonpath='{.data}' | jq .
  else
    kubectl -n ${namespace} get secret
  fi
fi
