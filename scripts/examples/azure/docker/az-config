#!/bin/bash
this_script_path="$(realpath ${0})"
this_script_name="${this_script_path##*/}"
this_script_directory="${this_script_path%/*}"

PATH="${this_script_directory}:${PATH}"

show_usage() {
  cat <<EOF

  Azure CLI Configuration

    Options:

      -h,  --help                  Show this help
      -gt, --generate-token        Azure CLI Access Token is generated if not exists
      -rt, --renew-token           Azure CLI Access Token is generated if expired
      -c,  --target-directory      Target directory to store Azure CLI configuration files (default: /tmp/work)
      
    Examples:

      ${this_script_name} \\
        --generate-token \\
        --renew-token \\
        --target-directory /tmp/work

EOF
}

while [[ "${1}" =~ ^- && ! "${1}" == "--" ]]; do
  case ${1} in
    -h | --help )
      show_usage
      exit 1
      ;;

    -gt | --generate-token )
      generate_token=true
      ;;

    -rt | --renew-token )
      renew_token=true
      ;;
    
    -c | --target-directory )
      shift
      target_directory="${1}"
      ;;

    * )
      echo "Invalid option: ${1}"
      show_usage
      exit 1
      ;;
  esac
  shift
done

if [[ "${1}" == '--' ]]; then shift; fi

if [[ -z "${generate_token}" ]]; then
  echo "--generate-token is required"
  show_usage
  exit 1
fi

if [[ -z "${renew_token}" ]]; then
  echo "--renew-token is required"
  show_usage
  exit 1
fi

copy-file() {
  local file_name="${1?}"
  local source_file="${azure_source_directory?}/${file_name?}"
  local target_file="${azure_target_directory?}/${file_name?}"

  if [[ -e "${source_file}" ]]; then
    cp "${source_file}" "${target_file}"
  fi
}

generate_token() {
  az account get-access-token > "${azure_source_access_token_file}"
}

generate_token=${generate_token:-false}
renew_token=${renew_token:-false}
target_directory="${target_directory:-/tmp/work}"

# Source
azure_source_directory="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
azure_access_token_file="access_token.json"
azure_profile_file="azureProfile.json"
azure_msal_token_cache_file="msal_token_cache.json"
azure_service_principal_entries_file="service_principal_entries.json"

# Access Token File
azure_source_access_token_file="${azure_source_directory?}/${azure_access_token_file?}"

# Target files
azure_target_directory="${target_directory?}/.azure"
mkdir --parents "${azure_target_directory?}"

# If Token File not exists and we want to generate it
if [[ ! -f "${azure_source_access_token_file}" ]] && \
   [[ "${generate_token}" = "true"             ]]; then
  generate_token

  if [[ $? -ne 0 ]]; then
    exit 1
  fi
fi

# Check if Access Token is valid
az-token-is-valid "${azure_source_access_token_file}" 2> /dev/null

result_code=$?

# If it's expired
if [[ ${result_code} -eq 2 ]]; then
  if [[ "${renew_token}" = "true" ]]; then
    generate_token
    
    if [[ $? -ne 0 ]]; then
      exit 1
    fi
  fi
fi

# Copy files from Source to Target directory
copy-file "${azure_access_token_file?}"
copy-file "${azure_profile_file?}"
copy-file "${azure_msal_token_cache_file}"
copy-file "${azure_service_principal_entries_file}"

# Output target directory
echo "${azure_target_directory?}"
