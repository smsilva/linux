#!/bin/bash
this_script_path="$(realpath ${0})"
this_script_name="${this_script_path##*/}"
this_script_directory="${this_script_path%/*}"

certbot_command_file="${HOME}/.certbot-cmd"

show_usage() {
cat <<EOF

  Generate a Let's Encrypt certificate for a domain and its cnames

    Options:

      -h,   --help      Show this help
      -d,   --domain    Domain name
      -e,   --email     Email address for notifications
      -cn,  --cname     cname for the domain
      -s,   --staging   Use the staging server
      
    Examples:

      ${this_script_path} \\
        --email certificates@example.com \\
        --domain sandbox.wasp.silvios.me \\
        --cname apps \\
        --cname services \\
        --cname demo

      ${this_script_path} \\
        --email certificates@example.com \\
        --domain sandbox.wasp.silvios.me \\
        --cname "*" \\
        --cname "*.apps" \\
        --cname "*.services"

      ${this_script_path} \\
        --email certificates@example.com \\
        --domain sandbox.wasp.silvios.me \\
        --cname "*" \\
        --cname "*.apps" \\
        --cname "*.services" \\
        --staging

EOF
}

cnames=""

while [[ "${1}" =~ ^- && ! "${1}" == "--" ]]; do
  case ${1} in
    -h | --help )
      show_usage
      exit 0
      ;;
    
    -d, --domain )
      shift
      domain="${1}"
      ;;

    -e, --email )
      shift
      certbot_notification_email="${1}"
      ;;

    -cn, --cname )
      shift
      cnames="${cnames} ${1}"
      ;;

    -s, --staging )
      server="acme-staging-v02"
      ;;
  esac
  shift
done

if [[ "${1}" == '--' ]]; then
  shift
fi

server="${server:-acme-v02}"
certbot_acme_server="${CERTBOT_ACME_SERVER:-https://${server?}.api.letsencrypt.org/directory}"

if [[ -z "${domain}" ]]; then
  echo "--domain is required"
  show_usage
  exit 1
fi

if [[ -z "${certbot_notification_email}" ]]; then
  echo "--email is required"
  show_usage
  exit 1
fi

if [[ -z "${cnames}" ]]; then
  echo "--cname is required"
  show_usage
  exit 1
fi

cat <<EOF > "${certbot_command_file}"
#!/bin/bash
certbot certonly \\
  --manual \\
  --preferred-challenges dns \\
  --agree-tos \\
  --email "${certbot_notification_email}" \\
  --no-eff-email \\
  --server "${certbot_acme_server}" \\
EOF

while read -r cname; do
  if [ -n "${cname}" ]; then
    echo "  -d ${cname}.${domain}" \\>> "${certbot_command_file}"
  fi
done <<< "$(echo "${cnames}" | tr " " "\n")"

cat <<EOF >> "${certbot_command_file}"
  --config-dir "\${HOME}/certificates/config" \\
  --work-dir "\${HOME}/certificates/work" \\
  --logs-dir "\${HOME}/certificates/logs"
EOF

echo "" >> "${certbot_command_file}"

echo ""

cat "${certbot_command_file}"

exit 0

openssl pkcs12 \
  -export \
  -inkey "certificate.key.pem" \
  -in    "fullchain.pem" \
  -out   "certificate-combined.pfx"

openssl pkcs12 \
  -in "certificate-combined.pfx" \
  -info

openssl x509 \
  -in "cert1.pem" \
  -noout \
  -text

domain="httpbin.org"

echo \
| openssl s_client \
  -connect "${domain?}:443" 2>&1 \
| sed --quiet '/Certificate chain/, /---/p' \
| grep -E "^ [0-9].*"

echo \
| openssl s_client \
  -connect "${domain?}:443" 2>&1 \
| openssl x509 \
    -noout \
    -text
